from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Chat, User, Message
from aiogram.types import FSInputFile
from datetime import datetime, timedelta
from aiogram.types import BotCommand
from playwright.sync_api import sync_playwright
import asyncio
import aiosqlite
import re
import os
import random
import string
import json
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter, DayLocator
from matplotlib.ticker import MaxNLocator
import pandas as pd
from io import BytesIO
import logging
import config
from db import init_db, clear_database, fetchallStats
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

scheduler = AsyncIOScheduler()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = config.API_TOKEN
TEST_MODE = config.TEST_MODE 
album_id = 1  # for testing stats
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é
async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="analyze", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É")
    ]
    await bot.set_my_commands(commands)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–ª—å–±–æ–º–∞ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
def extract_album_id(url):
    pattern = re.compile(r'/music/(album|playlist)/([-_0-9]+)')
    match = pattern.search(url)
    if match:
        return match.group(2)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID (–≤—Ç–æ—Ä—É—é –≥—Ä—É–ø–ø—É)
    return None

def is_valid_album_url(url):
    # –î–æ–ø—É—Å–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–ª—å–±–æ–º—ã –∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã
    pattern = re.compile(r'https?://(m\.)?vk\.com/music/(album|playlist)/[-\d]+_[\d]+(?:_[a-zA-Z0-9]+)?')
    return re.match(pattern, url)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–ª—å–±–æ–º–µ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é Playwright
def get_album_info(url):
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        page.goto(url)

        try:
            if 'music/album' in url:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–ª—å–±–æ–º–æ–≤
                page.wait_for_selector('.AudioPlaylistSnippet__info', timeout=30000)
                page.wait_for_selector('.AudioPlaylistSnippet__title--main', timeout=30000)
                page.wait_for_selector('.AudioPlaylistSnippet__author a[href^="/artist/"]', timeout=30000)

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω
                play_count_element = page.query_selector('.AudioPlaylistSnippet__info')
                play_count_text = play_count_element.inner_text() if play_count_element else "0 –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π"

                if '–∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π' in play_count_text:
                    plays = play_count_text.split('–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π')[0].strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
                    track_count = play_count_text.split('–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π')[1].split('–∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π')[0].strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω
                else:
                    plays = play_count_text.strip()
                    track_count = '1'

                # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä –∏ –≥–æ–¥
                genre_year_element = page.query_selector_all('.AudioPlaylistSnippet__info')
                genre_year_text = genre_year_element[1].inner_text() if len(genre_year_element) > 1 else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                album_name = page.query_selector('.AudioPlaylistSnippet__title--main').inner_text() if page.query_selector('.AudioPlaylistSnippet__title--main') else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                artist_name = page.query_selector('.AudioPlaylistSnippet__author a[href^="/artist/"]').inner_text() if page.query_selector('.AudioPlaylistSnippet__author a[href^="/artist/"]') else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            elif 'music/playlist' in url:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
                page.wait_for_selector('.AudioPlaylistSnippet__info', timeout=30000)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ (—É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–∑–ª–æ–≤)
                track_count_element = page.query_selector('.AudioPlaylistSnippet__info')
                track_count_html = track_count_element.inner_html() if track_count_element else ""
                track_count = ''.join([part for part in track_count_html if part.isdigit()]).strip() or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
                play_count_element = page.query_selector_all('.AudioPlaylistSnippet__info')[1]
                play_count_text = play_count_element.inner_text().split('–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π')[0].strip() if play_count_element else "0"

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                album_name = page.query_selector('.AudioPlaylistSnippet__title--main').inner_text() if page.query_selector('.AudioPlaylistSnippet__title--main') else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                artist_name = page.query_selector('.AudioPlaylistSnippet__author a').inner_text() if page.query_selector('.AudioPlaylistSnippet__author a') else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                genre_year_text = "—ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç, –Ω–µ—Ç —Ç–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"

            browser.close()

            return {
                "plays": play_count_text,
                "track_count": track_count,
                "name": album_name,
                "nick": artist_name,
                "genre_year": genre_year_text.strip()
            }
        except TimeoutError:
            browser.close()
            logging.error(f"–û—à–∏–±–∫–∞ Timeout –¥–ª—è URL: {url}")
            raise Exception("–¢–∞–∫–æ–≥–æ –∞–ª—å–±–æ–º–∞ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            browser.close()
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}')
            raise Exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç!\n\nüîó –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–ª—å–±–æ–º VK –∏ —è –Ω–∞—á–Ω—É —Å–æ–±–∏—Ä–∞—Ç—å –ø–æ –Ω–µ–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
@dp.message(Command("test"))
async def test_command(message: types.Message):
    if TEST_MODE == 1:
        await clear_database()
        await send_test_messages(message.chat.id)

# –ö–æ–º–∞–Ω–¥–∞ /analyze
@dp.message(Command("analyze"))
async def analyze_albums(message: types.Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∞–ª—å–±–æ–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect(config.DATABASE) as db:
        async with db.execute('SELECT id, name, nick FROM albums') as cursor:
            albums = await cursor.fetchall()

    # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–ª—å–±–æ–º–æ–≤
    if not albums:
        await message.answer("üß∫ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª—å–±–æ–º–∞
    buttons = [
        [InlineKeyboardButton(text=f"{album_name} - {album_nick}", callback_data=f"album_{album_id}")]
        for album_id, album_name, album_nick in albums
    ]
    
    # –°–æ–∑–¥–∞–µ–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    inline_kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∞–ª—å–±–æ–º–æ–≤
    await message.answer("üîÄ –í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", reply_markup=inline_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_album_link(message: types.Message):
    album_url = message.text.strip()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    message_wait = await message.answer("‚åõ –î—É–º–∞—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏
    if not is_valid_album_url(album_url):
        try:
            await message_wait.delete()
        except:
            pass
        await message.answer_photo(photo='https://i.ibb.co/ZdY4JSD/image.png', caption="‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–ª—å–±–æ–º.\n\n‚ÑπÔ∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\nhttps://vk.com/music/album/-2000600197_20600197_805b14b56dae3b32e9\nhttps://vk.com/music/playlist/-147845620_2949\n\nüì∑ –ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω—É–∂–Ω—ã–π –∞–ª—å–±–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –∏ –í—ã –ø–µ—Ä–µ–π–¥—ë—Ç–µ –Ω–∞ –µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Å—Å—ã–ª–∫–∏
    album_id = extract_album_id(album_url)
    if not album_id:
        try:
            await message_wait.delete()
        except:
            pass
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–ª—å–±–æ–º —Å —Ç–∞–∫–∏–º ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect(config.DATABASE) as db:
        async with db.execute('SELECT * FROM albums WHERE url LIKE ?', (f'%{album_id}%',)) as cursor:
            album_exists = await cursor.fetchone()

    if album_exists:
        try:
            await message_wait.delete()
        except:
            pass

        await message.answer("ü§´ –≠—Ç–æ—Ç –∞–ª—å–±–æ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /analyze –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ
        try:
            await message_wait.delete()
        except:
            pass
        message_loading = await message.answer("‚åõ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        album_info = await asyncio.to_thread(get_album_info, album_url)

        track_count = album_info.get('track_count', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        async with aiosqlite.connect(config.DATABASE) as db:
            await db.execute('INSERT INTO albums (url, name, nick, genre_year, counts, track_count, date) VALUES (?, ?, ?, ?, ?, ?, ?)', 
                             (album_url, album_info["name"], album_info["nick"], album_info["genre_year"], album_info["plays"], track_count, current_date))
            await db.commit()

        try:
            await message_loading.delete()
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"‚òëÔ∏è <b>–ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä.</b>\n\nüìÉ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª—å–±–æ–º–µ</b>\n\nüî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: <b>{album_info['plays']}</b>\n"
                             f"üéµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –≤ –∞–ª—å–±–æ–º–µ: <b>{track_count}</b>\nüìì –ê–ª—å–±–æ–º: <b>{album_info['name']}</b>\n"
                             f"üò∂ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>{album_info['nick']}</b>\nüåç –ñ–∞–Ω—Ä –∏ –≥–æ–¥: <b>{album_info['genre_year']}</b>", parse_mode='HTML')
    except Exception as e:
        try:
            await message_loading.delete()
        except:
            pass

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∞–ª—å–±–æ–º–∞
        if str(e) == "–¢–∞–∫–æ–≥–æ –∞–ª—å–±–æ–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç":
            await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –∞–ª—å–±–æ–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            print(f'[handle_album_link]: {e}')
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\nüìÉ –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç –∞–ª—å–±–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∞–ª—å–±–æ–º—ã
@dp.callback_query(lambda callback_query: callback_query.data.startswith("album_"))
async def show_album_info(callback_query: types.CallbackQuery):
    album_id = callback_query.data.split("_")[1]

    try:
        await callback_query.message.delete()
    except:
        pass

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º–∞ –∏–∑ –±–∞–∑—ã
    async with aiosqlite.connect(config.DATABASE) as db:
        async with db.execute('SELECT name, nick, genre_year, counts, track_count, date FROM albums WHERE id = ?', (album_id,)) as cursor:
            album = await cursor.fetchone()

    if album:
        name, nick, genre_year, counts, track_count, date_added  = album

        # –°–æ–∑–¥–∞–µ–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –∏ "–ù–∞–∑–∞–¥"
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{album_id}"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_analyze")
            ]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ
        await callback_query.message.answer(f"\n\nüìÉ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª—å–±–æ–º–µ:</b>\n\nüñ•Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: <b>{album_id}</b>\nüî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: <b>{counts}</b>\n"
                                            f"üéµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –≤ –∞–ª—å–±–æ–º–µ: <b>{track_count}</b>\n"
                                            f"üìì –ê–ª—å–±–æ–º: <b>{name}</b>\nüò∂ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>{nick}</b>\nüåç –ñ–∞–Ω—Ä –∏ –≥–æ–¥: <b>{genre_year}</b>\nüìÖ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: <b>{date_added}</b>",
                                            reply_markup=inline_kb, parse_mode='HTML')
    else:
        await callback_query.message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª—å–±–æ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda callback_query: callback_query.data == "back_to_analyze")
async def back_to_analyze(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–ª—å–±–æ–º–µ
    try:
        await callback_query.message.delete()
    except:
        pass

    # –í—ã–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥—É /analyze
    await analyze_albums(callback_query.message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –≤ —á–∏—Å–ª–æ
def parse_plays(plays_str):
    # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
    plays_str = plays_str.lower().strip()
    
    # –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —á–∏—Å–ª–∞–º –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º
    plays_str = re.sub(r'[^0-9kKmM]', '', plays_str)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 'K' –∏–ª–∏ 'M' –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
    if 'k' in plays_str:
        return int(float(plays_str.replace('k', '').strip()) * 1000)
    elif 'm' in plays_str:
        return int(float(plays_str.replace('m', '').strip()) * 1000000)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –±–µ–∑ 'K' –∏–ª–∏ 'M'
        match = re.match(r'(\d+)', plays_str)
        if match:
            return int(match.group(1))
        return 0

@dp.callback_query(lambda callback_query: callback_query.data.startswith("stats_"))
async def show_stats(callback_query: types.CallbackQuery):
    album_id = callback_query.data.split("_")[1]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–π 5-–π –¥–µ–Ω—å
    stats = await fetchallStats(album_id)

    if not stats or len(stats) < 2:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ 2-—Ö –∑–∞–ø–∏—Å–µ–π, –Ω–µ —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        await callback_query.message.answer("‚ùó –î–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º –¥–≤–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏.")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç datetime
    dates = pd.to_datetime([stat[1][:10] for stat in stats])

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –≤ —á–∏—Å–ª–∞
    plays = [parse_plays(stat[0]) for stat in stats]

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (–º–µ–Ω—å—à–µ 2 –∑–∞–ø–∏—Å–µ–π), –≤—ã–≤–µ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(dates) < 2:
        await callback_query.message.answer("‚ùó –î–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–ø–æ 10 —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞–∂–¥–æ–º –≥—Ä–∞—Ñ–∏–∫–µ, –Ω–µ –±–æ–ª–µ–µ 10 –≥—Ä–∞—Ñ–∏–∫–æ–≤)
    max_graphs = 10
    points_per_graph = 10

    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π (10 –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ 10 —Ç–æ—á–µ–∫)
    if len(plays) > max_graphs * points_per_graph:
        plays = plays[-max_graphs * points_per_graph:]
        dates = dates[-max_graphs * points_per_graph:]

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10 –∑–∞–ø–∏—Å–µ–π
    chunks = [plays[i:i + points_per_graph] for i in range(0, len(plays), points_per_graph)]
    date_chunks = [dates[i:i + points_per_graph] for i in range(0, len(dates), points_per_graph)]

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    saved_files = []

    # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ 10 —Ç–æ—á–µ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    for i, (chunk_plays, chunk_dates) in enumerate(zip(chunks, date_chunks)):
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(chunk_dates, chunk_plays, marker="o", label="–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è", color="blue")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π –æ—Ç X –¥–æ —Ç–æ—á–∫–∏
        for j, txt in enumerate(chunk_plays):
            ax.vlines(x=chunk_dates[j], ymin=0, ymax=chunk_plays[j], colors="gray", linestyle="dashed", linewidth=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–¥ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–æ–π
            ax.annotate(f'{txt}', (chunk_dates[j], chunk_plays[j]), textcoords="offset points", xytext=(0, 10), ha='center')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–∏ X –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ax.xaxis.set_major_locator(DayLocator(interval=5))  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 5 –¥–Ω–µ–π
        ax.xaxis.set_major_formatter(DateFormatter("%d %b"))  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—å X –∫–∞–∫ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        ax.set_xlabel("–î–∞—Ç–∞")
        ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π")
        ax.set_title(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –¥–Ω–µ–π (–≥—Ä–∞—Ñ–∏–∫ {i + 1})")
        ax.legend(loc="upper left")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        random_filename = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10)) + '.png'
        filepath = os.path.join(os.getcwd(), random_filename)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ñ–∞–π–ª
        plt.savefig(filepath)
        plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        saved_files.append(filepath)

        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –±–æ–ª—å—à–µ 10 —Ñ–∞–π–ª–æ–≤
        if len(saved_files) >= max_graphs:
            break

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    for filepath in saved_files:
        try:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: {filepath}")
            photo = FSInputFile(filepath)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            await bot.send_photo(chat_id=callback_query.message.chat.id, photo=photo)
        finally:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if os.path.exists(filepath):
                os.remove(filepath)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
test_urls = [
    'https://vk.com/music/playlist/-147845620_2949',
    'https://vk.com/music/playlist/264577489_28',
    'https://vk.com/music/album/-2000600197_20600197_805b14b56dae3b32e9',
    'https://vk.com/music/album/-2000113136_7113136_2a00a34a604257e4fe'
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_test_messages(chat_id):
    test_urls = [
        "https://vk.com/music/playlist/-147845620_2949",
        "https://vk.com/music/playlist/264577489_28",
        "https://vk.com/music/album/-2000600197_20600197_805b14b56dae3b32e9",
        "https://vk.com/music/album/-2000113136_7113136_2a00a34a604257e4fe"
    ]
    
    for url in test_urls:
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É: {url}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User(id=123456, is_bot=False, first_name="Test", username="testuser")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º chat_id
        message = Message(
            message_id=1,
            date=datetime.now(),
            chat=Chat(id=chat_id, type="private"),
            from_user=test_user,
            text=url
        )
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –±–æ—Ç–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        message = message.as_(bot)
        await handle_album_link(message)
        await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

async def update_album_stats():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª—å–±–æ–º–æ–≤ –∫–∞–∂–¥—ã–µ 5 –¥–Ω–µ–π."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞
    data = load_data()

    async with aiosqlite.connect(config.DATABASE) as db:
        async with db.execute('SELECT id, url FROM albums') as cursor:
            albums = await cursor.fetchall()

        for album_id, album_url in albums:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º album_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ JSON
                album_id_str = str(album_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ JSON
                if album_id_str in data:
                    last_update = data[album_id_str].get('last_update', None)
                else:
                    data[album_id_str] = {"url": album_url, "last_update": None}
                    last_update = None

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 5 –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if last_update:
                    last_update_date = pd.to_datetime(last_update)
                    current_date = pd.Timestamp.now()

                    if (current_date - last_update_date).days < 5:
                        logging.info(f"–ê–ª—å–±–æ–º {album_id} –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –º–µ–Ω–µ–µ 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥.")
                        continue

                # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_album_info, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                from go import get_album_info
                album_info = await asyncio.to_thread(get_album_info, album_url)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–Ω—É–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è get_album_info
                logging.info(f"–î–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º–∞ {album_id}: {album_info}")

                if 'plays' not in album_info:
                    raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ 'plays' –¥–ª—è –∞–ª—å–±–æ–º–∞ {album_id}. –î–∞–Ω–Ω—ã–µ: {album_info}")

                current_plays = album_info['plays']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é

                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É stats
                await db.execute('INSERT INTO stats (aid, counts) VALUES (?, ?)', 
                                 (album_id, current_plays))

                await db.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ JSON
                data[album_id_str]['last_update'] = pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
                save_data(data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–ª—å–±–æ–º–∞ {album_id}: {e}", exc_info=True)

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π."""
    if os.path.exists(config.DATA_FILE):
        with open(config.DATA_FILE, 'r') as file:
            return json.load(file)
    else:
        return {}

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª."""
    with open(config.DATA_FILE, 'w') as file:
        json.dump(data, file, indent=4)

def update_last_checked(album_id):
    """–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–ª—å–±–æ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""
    data = load_data()
    data[album_id]['last_update'] = pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
    save_data(data)

# testing stats
# –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è—Ö
def generate_random_stats(start_date, days):
    stats = []
    current_date = start_date
    for _ in range(days):
        plays = random.randint(1000, 10000)  # –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –æ—Ç 1K –¥–æ 10K
        stats.append((album_id, plays, current_date.strftime('%Y-%m-%d %H:%M:%S')))
        current_date += timedelta(days=5)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 5 –¥–Ω–µ–π
    return stats

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É stats
async def insert_stats(album_id, stats):
    async with aiosqlite.connect(config.DATABASE) as db:
        for stat in stats:
            await db.execute(
                "INSERT INTO stats (aid, counts, date) VALUES (?, ?, ?)", 
                stat
            )
        await db.commit()
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–ª—å–±–æ–º–∞ {album_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

async def on_startup():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()

    if TEST_MODE == 1:
        logging.warning('–í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º #1, –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test')    

    elif TEST_MODE == 2:
        logging.info("–í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º #2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(5)
        try:
            await update_album_stats()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    elif TEST_MODE == 3:
        album_id = 1  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è album_id –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        logging.warning(f'–í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º #3, —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–µ–π–∫–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –∞–ª—å–±–æ–º ID: {album_id}.')

        start_date = datetime(2024, 10, 22)
        test_stats = generate_random_stats(start_date, 25)
        
        try:
            await insert_stats(album_id, test_stats)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    else:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ –ø—è—Ç—å –¥–Ω–µ–π")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 –¥–Ω–µ–π
        scheduler.add_job(update_album_stats, 'interval', days=5)

    # –°—Ç–∞—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
dp.startup.register(on_startup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    dp.run_polling(bot, skip_updates=True)